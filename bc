#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import csv
import os


# In[2]:

# Replace it with the directory where your abalone files is
# Remember only the directory path. Not the path to the file
path = r'''C:\Users\Pragati\Desktop'''


# In[3]:


from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier


# In[4]:


with open('C:\\Users\\Pragati\\Desktop\\bc.csv.txt') as file:
    rd = csv.reader(file)
    data = list(rd)


# In[5]:


data[:10]


# In[6]:


for i in data:
    if i[0] == "no-recurrence-events":
        i[0] = 0
    elif i[0] =="recurrence-events" :
        i[0] = 1
    elif i[0] =="?":
        i[0] = 2
   
for i in data:
    if i[1] == "10-19":
        i[1] = 0
    elif i[1] =="20-29" :
        i[1] = 1
    elif i[1] =="30-39" :
        i[1] = 2
    elif i[1] =="40-49" :
        i[1] = 3
    elif i[1] =="50-59" :
        i[1] = 4
    elif i[1] =="60-69" :
        i[1] = 5
    elif i[1] =="70-79" :
        i[1] = 6
    elif i[1] =="80-89" :
        i[1] = 7
    elif i[1] =="90-99" :
        i[1] = 8
    elif i[1] =="?":
        i[1] = 9
for i in data:
    if i[2] == "lt40":
        i[2] = 0
    elif i[2] =="ge40" :
        i[2] = 1
    elif i[2] =="premeno" :
        i[2] = 2
    elif i[2] =="?":
        i[2] = 3
for i in data:
    if i[3] == "0-4":
        i[3] = 0
    elif i[3] =="5-9" :
        i[3] = 1
    elif i[3] =="10-14" :
        i[3] = 2
    elif i[3] =="15-19" :
        i[3] = 3
    elif i[3] =="20-24" :
        i[3] = 4
    elif i[3] =="25-29" :
        i[3] = 5
    elif i[3] =="30-34" :
        i[3] = 6
    elif i[3] =="35-39" :
        i[3] = 7
    elif i[3] =="40-44" :
        i[3] = 8
    elif i[3] =="45-49" :
        i[3] = 9
    elif i[3] =="50-54" :
        i[3] = 10
    elif i[3] =="55-59" :
        i[3] = 11
    elif i[3] =="?":
        i[3] = 12
for i in data:
    if i[4] == "0-2":
        i[4] = 0
    elif i[4] =="3-5" :
        i[4] = 1
    elif i[4] =="6-8" :
        i[4] = 2
    elif i[4] =="9-11" :
        i[4] = 3
    elif i[4] =="12-14" :
        i[4] = 4
    elif i[4] =="15-17" :
        i[4] = 5
    elif i[4] =="18-20" :
        i[4] = 6
    elif i[4] =="21-23" :
        i[4] = 7
    elif i[4] =="24-26" :
        i[4] = 8
    elif i[4] =="27-29" :
        i[4] = 9
    elif i[4] =="30-32" :
        i[4] = 10
    elif i[4] =="33-35" :
        i[4] = 11
    elif i[4] =="36-39" :
        i[4] = 12
    elif i[4] =="?":
        i[4] = 13
for i in data:
    if i[5] == "yes":
        i[5] = 0
    elif i[5] =="no" :
        i[5] = 1
    elif i[5] =="?":
        i[5] = 2
    
for i in data:
    if i[7] == "left":
        i[7] = 0
    elif i[7] =="right" :
        i[7] = 1
    elif i[7] =="?":
        i[7] = 2
for i in data:
    if i[8] == "left_up":
        i[8] = 0
    elif i[8] =="left_low" :
        i[8] = 1
    elif i[8] =="right_up" :
        i[8] = 2
    elif i[8] =="right_low" :
        i[8] = 3
    elif i[8] =="central" :
        i[8] = 4
    elif i[8] =="?":
        i[8] = 5
for i in data:
    if i[9] == "yes":
        i[9] = 0
    elif i[9] =="no" :
        i[9] = 1
    elif i[9] =="?":
        i[9] = 2
# In[7]:


#data[:15]


# In[8]:


data = np.int32(np.asarray(data))


# In[9]:


data[:10]


# In[13]:


with open(path+"/bc_prepared.csv","w+") as file:
    wr = csv.writer(file)
    for i in range(len(data)):
        wr.writerow(data[i])


# In[14]:


data = pd.read_csv(path+"/bc_prepared.csv",names=["A","B","C","D","E","F","G","H","I","J"])


# In[15]:


data = pd.DataFrame(data)


# In[16]:


data


# In[18]:


X = data.drop("A",axis=1)


# In[19]:


y = data.A


# In[20]:


X.head


# In[21]:


y.head


# In[22]:


X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=32)


# In[47]:


knn = KNeighborsClassifier(n_neighbors=32)


# In[48]:


p = knn.fit(X_train,y_train)


# In[49]:


training_score = knn.score(X_train,y_train)


# In[46]:


testing_score = knn.score(X_test,y_test)

print("Model Info: \n",p)
print("Training_score: {:.4f}%".format(training_score*100))
print("Testing_score: {:.4f}%".format(testing_score*100))






